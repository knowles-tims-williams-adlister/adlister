package com.codeup.adlister.dao;

import com.codeup.adlister.models.User;
import com.mysql.cj.jdbc.Driver;

import java.sql.*;

public class MySQLUsersDao implements Users {
    private Connection connection;

    /**
     * Constructor
     * @param config
     */
    public MySQLUsersDao(Config config) {
        try {
            DriverManager.registerDriver(new Driver());
            connection = DriverManager.getConnection(
                config.getUrl(),
                config.getUser(),
                config.getPassword()
            );
        } catch (SQLException e) {
            throw new RuntimeException("Error connecting to the database!", e);
        }
    }

    /**
     * When registering an account, user info is passed in. The user table is populated with a new username, email, and password hash. No duplicate
     * usernames allowed.
     * @param user
     * @return Key generated by insertion command.
     */

    /**
     * Validate the user data before insertion.
     * @param user
     * @return true if the user data is valid, false otherwise.
     */
    @Override
    public boolean isValidUser(User user) {
        String username = user.getUsername();
        String email = user.getEmail();
        String password = user.getPassword();

        if (username == null || username.trim().isEmpty() || username.length() > 30) {
            return false;
        }
        return true;
    }

    /**
     * Searches through the Users table in the DB for a user that has
     * a matching username. If found, return a User DAO object.
     * @param username
     * @return User Object
     */
    @Override
    public User findByUsername(String username) {
        String query = "SELECT * FROM users WHERE username = ? LIMIT 1";
        try {
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, username);
            return extractUser(stmt.executeQuery());
        } catch (SQLException e) {
            throw new RuntimeException("Error finding a user by username", e);
        }
    }

    /**
     * When registering an Account, User info is passed in. User table is populated
     * with a new user's username, email, and password hashed. No duplicate usernames
     * allowed.
     * @param user
     * @return Key generated by insertion command.
     */
    @Override
    public Long insert(User user) {
        String query = "INSERT INTO users(username, email, password) VALUES (?, ?, ?)";
        try {
            PreparedStatement stmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPassword());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            rs.next();
            return rs.getLong(1);
        } catch (SQLException e) {
            throw new RuntimeException("Error creating new user", e);
        }
    }

    /**
     * Finds a user in the User table by their id. Updates their password with the
     * new password that is passed in.
     * @param user
     * @param password
     */
    @Override
    public void updatePassword(User user, String password) {
        String query = "UPDATE users SET password = ? WHERE id = ?";
        try{
            PreparedStatement stmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, password);
            stmt.setLong(2, user.getId());
            stmt.executeUpdate();
        } catch (SQLException e){
            throw new RuntimeException("Could not update Password", e);
        }
    }

    /**
     *  Finds a user in the User table by their id. Updates their email with the
     *  new email that is passed in.
     * @param user
     * @param email
     */
    @Override
    public void updateEmail(User user, String email) {
        String query = "UPDATE users SET email = ? WHERE id = ?";
        try{
            PreparedStatement stmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, email);
            stmt.setLong(2, user.getId());
            stmt.executeUpdate();
        } catch (SQLException e){
            throw new RuntimeException("Could not update Password", e);
        }
    }

    /**
     * Finds a user in the User table by their id. Updates their email with the
     * new email that is passed in.
     * @param user
     * @param username
     */
    @Override
    public void updateUsername( User user, String username) {
        String query = "UPDATE users SET username = ? WHERE id = ?";
        try{
            PreparedStatement stmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, username);
            stmt.setLong(2, user.getId());
            stmt.executeUpdate();
        } catch (SQLException e){
            throw new RuntimeException("Could not update Password", e);
        }
    }

    /**
     * Finds a user by the user id and then deletes it from the users
     * table.
     * @param user
     */
    @Override
    public void deleteUser(User user) {
        String deleteStatement = "DELETE FROM users WHERE id = ?";
        try{
            PreparedStatement stmt = connection.prepareStatement(deleteStatement);
            stmt.setLong(1, user.getId());
            stmt.execute();
        } catch (SQLException e){
            throw new RuntimeException("Could not delete user", e);
        }
    }

    @Override
    public User findByEmail( String email) {
        String query = "SELECT * FROM users WHERE email = ? LIMIT 1";
        try {
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, email);
            return extractUser(stmt.executeQuery());
        } catch (SQLException e) {
            throw new RuntimeException("Error finding a user by username", e);
        }
    }

    /**
     * Take the result of searching for a user and then turns it
     * into a User object.
     * @param rs
     * @return user
     * @throws SQLException
     */
    private User extractUser(ResultSet rs) throws SQLException {
        if (! rs.next()) {
            return null;
        }
        return new User(
            rs.getLong("id"),
            rs.getString("username"),
            rs.getString("email"),
            rs.getString("password")
        );
    }
}
